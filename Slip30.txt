Slip30.txt
Q1 MPI program to calculate min number from randomly generated 1000 numbers

  #include<stdio.h>
#include<mpi.h>
#include<stdlib.h>

#define N 1000
int main(int argc, char**argv)
{
	int rank,size;
	MPI_Init(&argc,&argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);

	int i;
	int local_min=100;
	int local_max=0;
	int global_min, global_max;
	int *arr=(int*)malloc(N * sizeof(int));
	
	srand(rank);
	
	for(i=0;i<N;i++)
	{
		arr[i]=rand()%100;
		if(arr[i]<local_min)
		{
			local_min=arr[i];
		}
		if(arr[i]>local_max)
		{
			local_max=arr[i];
		}
		
        }
        
        MPI_Reduce(&local_min,&global_min,1,MPI_INT,MPI_SUM,0,MPI_COMM_WORLD);
	MPI_Reduce(&local_max,&global_max,1,MPI_DOUBLE,MPI_SUM,0,MPI_COMM_WORLD);
	
	if(rank==0)
        {
        printf("Global min=%d\n",global_min);
	printf("Global max=%d\n",global_max);
        }
        MPI_Finalize();
}                


Q2 FCFS Algorithm

  #include<stdio.h>
#include<stdlib.h>
main()
{
	int queue[20],n,head,i,j,k,seek=0,max,diff;
	float avg;
	printf("Enter the max range of disk:\n");
	scanf("%d",&max);
	printf("Enter the size of queue request:\n");
	scanf("%d",&n);
	printf("Enter the queue of disk positions to be read:\n");
	for(i=0;i<=n;i++)
	scanf("%d",&queue[i]);
	printf("Enter the initial head position:\n");
	scanf("%d",&head);
	queue[0]=head;
	for(j=0;j<=n-1;j++)
	{
		diff=abs(queue[j+1]-queue[j]);
		seek+=diff;
		printf("Disk head moves from %d to %d with %d\n",queue[j],queue[j+1],diff);
	}
	printf("Total seek time is %d\n",seek);
	avg=seek/(float)n;
	printf("Average seek time is %f\n",avg);
}

