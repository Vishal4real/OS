Slip10.txt

Q1 MPI program to calculate sum and average

  #include<stdio.h>
#include<mpi.h>
#include<stdlib.h>

#define N 1000
int main(int argc, char**argv)
{
	int rank,size;
	MPI_Init(&argc,&argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);

	int i;
	int local_sum=0;
	int global_sum;
	double local_average, global_average;
	int *arr=(int*)malloc(N * sizeof(int));
	
	srand(rank);
	
	for(i=0;i<N;i++)
	{
		arr[i]=rand()%100;
        	local_sum+=arr[i];
        }
        
        MPI_Reduce(&local_sum,&global_sum,1,MPI_INT,MPI_SUM,0,MPI_COMM_WORLD);
        
	local_average=(double)local_sum/N;
	MPI_Reduce(&local_average,&global_average,1,MPI_DOUBLE,MPI_SUM,0,MPI_COMM_WORLD);
	global_average /=size;
	
	if(rank==0)
        {
        printf("Global sum=%d\n",global_sum);
	printf("Global average=%.2f\n",global_average);
        }
        MPI_Finalize();
}                


 Q2 CSCAN Algorithm

  #include<stdio.h>
#include<stdlib.h>
int main()
{
	int RQ[100],i,j,n,TotalHeadMovement=0,initial,size,move;
	printf("Enter the number of Request:\n");
	scanf("%d",&n);
	printf("Enter the Request Sequence :\n");
	for(i=0;i<n;i++)	
	scanf("%d",&RQ[i]);	
	printf("Enter the initial head positon:\n");
	scanf("%d",&initial);
	printf("Enter total disk size\n");
	scanf("%d",&size);
	printf("Enter the head movement direction for high 1 and for low 0\n");
	scanf("%d",&move);
	for(i=0;i<n;i++)
	{
		for(j=0;j<n-1;j++)
		{
			if(RQ[j]>RQ[j+1])
			{
				int temp;
				temp=RQ[j];
				RQ[j]=RQ[j+1];
				RQ[j+1]=temp;
			}
		}
	}
	int index;
	for(i=0;i<n;i++)
	{
		if(initial<RQ[i])
		{
			index=i;
			break;
		}
	}

	if(move==1)
	{
		for(i=index;i<n;i++)
		{
			TotalHeadMovement=TotalHeadMovement+abs(RQ[i]-initial);
			initial=RQ[i];		
		}
		TotalHeadMovement=TotalHeadMovement+abs(size-RQ[i-1]-1);
		TotalHeadMovement=TotalHeadMovement+abs(size-1-0);
		initial=0;
		for(i=0;i<index;i++)
		{
			TotalHeadMovement=TotalHeadMovement+abs(RQ[i]-initial);
			initial=RQ[i];
		}
	}
	else
	{
		for(i=index-1;i>=0;i--)
		{
			TotalHeadMovement=TotalHeadMovement+abs(RQ[i]-initial);
			initial=RQ[i];
		}
		TotalHeadMovement=TotalHeadMovement+abs(RQ[i+1]-0);
		TotalHeadMovement=TotalHeadMovement+abs(size-1-0);
		initial=size-1;
		for(i=n-1;i>=index;i++)
		{
			TotalHeadMovement=TotalHeadMovement+abs(RQ[i]-initial);
		}
	}
	printf("Total head movement is %d",TotalHeadMovement);
	return 0;
}	