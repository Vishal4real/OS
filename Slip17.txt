Slip17.txt

Q1 Indexed file allocation Method

#include<stdio.h>
#include<string.h>
#include<stdlib.h>

typedef struct dir
{
	char fname[20];
	int ino,flag;
	struct dir *next;
}DIR;

DIR *first,*last;
int d,fat[200],free_blocks;
void print_dir()
{
	DIR *p;
	int i;
	printf("--------------------------------------------\n");
	printf("File\tInode\tBlocks List\n");
	printf("--------------------------------------------\n");
	p = first;
	while(p!=NULL)
	{
		if(p->flag==0)
		{
			printf("%s\t%d\t",p->fname,p->ino);
			for(i=0;i<d;i++)
				if(fat[i]==p->ino)
					printf("%d,",i);
			printf("\b \n");
		}
		p=p->next;
	}
	printf("---------------------------------------------\n");
}
void print_free_list()
{
	int i;
	printf("Free blocks list:");
	for(i=0;i<d;i++)
		if(fat[i]==-999)
			printf("%d->",i);
	printf("NULL\n");
}
void main()
{
	DIR *p;
	int i,j,bno,ch;
	char fname[20];
	printf("Enter no.of disk blocks:");
	scanf("%d",&d);
	for(i=0;i<d;i++)
		fat[i]=-999;
	free_blocks = d;
	while(1)
	{
	printf("1.Create\n2.Delete\n3.Print dir/free list\n4.Exit");
		printf("\nEnter ur choice (1-4):");
		scanf("%d",&ch);
		switch(ch)
		{
		case 1:
			printf("Enter file name:");
			scanf("%s",fname);
			printf("Enter no.of blocks:");
			scanf("%d",&bno);
			if(free_blocks > bno)
			{
				free_blocks -= bno+1;
				p=(DIR*)malloc(sizeof(DIR));
				strcpy(p->fname,fname);
				p->flag=0;
				p->next=NULL;
				for(i=0;i<d;i++)
					if(fat[i]==-999) break;
				p->ino = i;
				fat[i]=-1;
				i++;
				while(bno!=0)
				{
					if(fat[i]==-999)
					{
						fat[i]=p->ino;
						bno--;
					}
					i++;
				}
				if(first==NULL) first=p;
				else last->next=p;
				last=p;
		printf("File %s created successfully.\n",fname);
			}
			else
		printf("Unable to create file %s\n",fname);
			break;
		case 2:
			printf("Enter file to be deleted:");
			scanf("%s",fname);
			p=first;
			while(p!=NULL)
			{
			if(strcmp(p->fname,fname)==0 && p->flag==0)
					break;
				p=p->next;
			}
			if(p==NULL)
				printf("File %s not found\n",fname);
			else
			{
				p->flag=1;
				bno=0;
				for(i=0;i<d;i++)
				{
					if(fat[i]==p->ino)
					{
						fat[i]=-999;
						bno++;
					}
				}
				fat[p->ino]=-999;
				free_blocks+=bno+1;
		printf("File %s deleted successfully.\n",fname);
			}
			break;
		case 3:
			print_dir();
			print_free_list();
			break;
		case 4:	exit(0);
		}//switch
	}//while
}//main

Q2 LOOK Algorithm

#include<stdio.h>
#include<stdlib.h>
int main()
{
	int RQ[100],i,j,n,TotalHeadMovement=0,initial,size,move;
	printf("Enter the number of Request:\n");
	scanf("%d",&n);
	printf("Enter the Request Sequence :\n");
	for(i=0;i<n;i++)	
	scanf("%d",&RQ[i]);	
	printf("Enter the initial head positon:\n");
	scanf("%d",&initial);
	printf("Enter total disk size\n");
	scanf("%d",&size);
	printf("Enter the head movement direction for high 1 and for low 0\n");
	scanf("%d",&move);
	for(i=0;i<n;i++)
	{
		for(j=0;j<n-1;j++)
		{
			if(RQ[j]>RQ[j+1])
			{
				int temp;
				temp=RQ[j];
				RQ[j]=RQ[j+1];
				RQ[j+1]=temp;
			}
		}
	}
	int index;
	for(i=0;i<n;i++)
	{
		if(initial<RQ[i])
		{
			index=i;
			break;
		}
	}

	if(move==1)
	{
		for(i=index;i<n;i++)
		{
			TotalHeadMovement=TotalHeadMovement+abs(RQ[i]-initial);
			initial=RQ[i];		
		}
		for(i=index-1;i>=0;i--)
		{
			TotalHeadMovement=TotalHeadMovement+abs(RQ[i]-initial);
			initial=RQ[i];
		}
	}
	else
	{
		for(i=index-1;i>=0;i--)
		{
			TotalHeadMovement=TotalHeadMovement+abs(RQ[i]-initial);
			initial=RQ[i];
		}
		for(i=index;i<n;i++)
		{
			TotalHeadMovement=TotalHeadMovement+abs(RQ[i]-initial);
		}
	}
	printf("Total head movement is %d",TotalHeadMovement);
	return 0;
}